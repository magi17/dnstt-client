#!/bin/bash

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Logging functions
log()     { echo -e "${BLUE}[*]${NC} $1"; }
error()   { echo -e "${RED}[!]${NC} $1"; }
success() { echo -e "${GREEN}[✓]${NC} $1"; }
warning() { echo -e "${YELLOW}[!]${NC} $1"; }

# Retry helper for wget
wget_retry() {
    local url="$1"
    local output="$2"
    local attempts=3
    local count=0

    while (( count < attempts )); do
        if wget -q -O "$output" "$url"; then
            return 0
        fi
        ((count++))
        warning "Download failed (attempt $count/$attempts). Retrying..."
        sleep 2
    done
    return 1
}

# Install dependencies
install_dependencies() {
    log "Updating package list..."
    pkg update -y
    
    log "Installing required packages..."
    pkg install wget -y
    
    success "Dependencies installed successfully"
}

# Setup ~/bin
setup_bin_directory() {
    log "Setting up ~/bin directory..."
    mkdir -p "$HOME/bin"
    
    if [[ ":$PATH:" != *":$HOME/bin:"* ]]; then
        echo 'export PATH="$HOME/bin:$PATH"' >> "$HOME/.bashrc"
        export PATH="$HOME/bin:$PATH"
        success "Added ~/bin to PATH"
    else
        log "~/bin already in PATH"
    fi
}

# Download a script into ~/bin
download_script() {
    local name="$1"
    local url="$2"
    local dest="$HOME/bin/$name"

    # Remove old version
    if [[ -f "$dest" ]]; then
        rm "$dest"
        log "Removed old $name"
    fi

    # Download with retries
    if wget_retry "$url" "$dest"; then
        chmod +x "$dest"
        if [[ -x "$dest" ]]; then
            success "$name installed successfully"
            return 0
        else
            error "$name downloaded but not executable!"
            return 1
        fi
    else
        error "Failed to download $name after retries"
        [[ -f "$dest" ]] && rm "$dest" # cleanup partial file
        return 1
    fi
}

# Create gtmmenu command
create_gtmmenu_command() {
    log "Creating gtmmenu command..."
    local cmd="$HOME/bin/gtmmenu"

    [[ -f "$cmd" ]] && rm "$cmd" && log "Removed old gtmmenu"

    cat > "$cmd" << 'EOF'
#!/bin/bash
if [[ -f "$HOME/bin/.select" ]]; then
    bash "$HOME/bin/.select"
else
    echo "Error: .select script missing! Reinstall required."
    exit 1
fi
EOF

    chmod +x "$cmd"
    success "gtmmenu command created"
}

# Fix menu command if missing
fix_menu_command() {
    log "Checking for 'menu' command..."
    if command -v menu &>/dev/null; then
        success "menu command is available"
        return 0
    fi

    warning "menu command not found. Installing..."
    if wget_retry "https://raw.githubusercontent.com/Jhon-mark23/Termux-beta/refs/heads/Test/install.sh" "menu_install.sh"; then
        chmod +x menu_install.sh
        ./menu_install.sh
        rm menu_install.sh
        success "menu installed"
        return 0
    else
        error "Failed to install menu"
        return 1
    fi
}

# Main installation
main_install() {
    clear
    echo -e "${CYAN}"
    echo "╔══════════════════════════════════════╗"
    echo "║        GTM Menu Installer            ║"
    echo "╚══════════════════════════════════════╝"
    echo -e "${NC}"

    log "Starting installation..."
    install_dependencies
    setup_bin_directory

    # Download core scripts
    download_script ".select" "https://github.com/magi17/dnstt-client/raw/refs/heads/main/select"
    download_script ".gtm"    "https://github.com/magi17/dnstt-client/raw/refs/heads/main/gtm"

    # Setup commands
    create_gtmmenu_command
    fix_menu_command

    echo -e "${CYAN}"
    echo "╔══════════════════════════════════════╗"
    echo "║         INSTALLATION COMPLETE        ║"
    echo "║  Use: gtmmenu   or   menu            ║"
    echo "╚══════════════════════════════════════╝"
    echo -e "${NC}"

    source ~/.bashrc

    log "Testing..."
    command -v gtmmenu &>/dev/null && success "gtmmenu ready!" || warning "Run: source ~/.bashrc"
}

main_install
